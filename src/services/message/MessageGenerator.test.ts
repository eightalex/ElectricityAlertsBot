import {MessageGenerator, MessageGeneratorInterface} from './MessageGenerator';
import {TimeDifferenceGenerator} from '../TimeDifferenceGenerator';

jest.mock('./TimeDifferenceGenerator', () => {
    return {
        TimeDifferenceGenerator: jest.fn().mockImplementation(() => {
            return {
                generate: jest.fn().mockReturnValue('1 –≥–æ–¥–∏–Ω—É'),
            };
        }),
    };
});

describe('MessageGenerator', () => {
    let messageGenerator: MessageGeneratorInterface;

    beforeEach(() => {
        messageGenerator = new MessageGenerator(new TimeDifferenceGenerator());
    });

    describe('generate', () => {
        it('should generate the message when the power is available', () => {
            const options = {
                isAvailable: true,
                lastTime: '1623141563000',
                nowDate: new Date('2022-01-01T01:01:01.000Z'),
            };

            const message = messageGenerator.generate(options);

            expect(message).toEqual('üü¢ –ó\'—è–≤–∏–ª–æ—Å—å —Å–≤—ñ—Ç–ª–æ\n\n–í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ç—Ä–∏–≤–∞–ª–æ\n1 –≥–æ–¥–∏–Ω—É');
        });

        it('should generate the message when the power is not available and it was available previously', () => {
            const options = {
                isAvailable: false,
                lastTime: '1623141563000',
                nowDate: new Date('2022-01-01T01:01:01.000Z'),
            };

            const expectedResult = [
                '‚ö´Ô∏è –ó–Ω–∏–∫–ª–æ —Å–≤—ñ—Ç–ª–æ\n\n–ï–ª–µ–∫—Ç—Ä–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è –±—É–ª–æ –Ω–∞—è–≤–Ω–µ\n1 –≥–æ–¥–∏–Ω—É',
                '‚ö´Ô∏è –ó–Ω–∏–∫–ª–æ —Å–≤—ñ—Ç–ª–æ\n\n–ï–ª–µ–∫—Ç—Ä–æ—Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è –±—É–ª–æ –Ω–∞—è–≤–Ω–µ\n1 –≥–æ–¥–∏–Ω—É',
            ];

            const message = messageGenerator.generate(options);

            expect(expectedResult).toContain(message);
        });

        it('should generate the message when the power is not available and it was not available previously', () => {
            const options = {
                isAvailable: false,
                lastTime: '0',
                nowDate: new Date('2022-01-01T01:01:01.000Z'),
            };

            const message = messageGenerator.generate(options);

            expect(message).toEqual('‚ö´Ô∏è –ó–Ω–∏–∫–ª–æ —Å–≤—ñ—Ç–ª–æ');
        });
    });
});
